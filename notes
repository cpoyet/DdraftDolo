typedef struct {
  xPL_MessageType messageType;
  int hopCount;
  Bool receivedMessage; /* TRUE if received, FALSE if being sent */

  String sourceVendor;
  String sourceDeviceID;
  String sourceInstanceID;

  Bool isGroupMessage;
  String groupName;

  Bool isBroadcastMessage;
  String targetVendor;
  String targetDeviceID;
  String targetInstanceID;

  String schemaClass;
  String schemaType;

  xPL_NameValueListPtr messageBody;
} xPL_Message, *xPL_MessagePtr;

struct _xPL_Service {
  Bool serviceEnabled;

  String serviceVendor;
  String serviceDeviceID;
  String serviceInstanceID;

  String serviceVersion;

  int groupCount;
  int groupAllocCount;
  String *groupList;

  Bool ignoreBroadcasts;

  int heartbeatInterval;
  time_t lastHeartbeatAt;
  xPL_MessagePtr heartbeatMessage;

  Bool configurableService;
  Bool serviceConfigured;
  String configFileName;
  int configChangedCount;
  int configChangedAllocCount;
  xPL_ServiceChangedListenerDefPtr changedListenerList;

  int configCount;
  int configAllocCount;
  xPL_ServiceConfigurablePtr configList;

  int filterCount;
  int filterAllocCount;
  xPL_ServiceFilterPtr messageFilterList;

  Bool reportOwnMessages;
  int listenerCount;
  int listenerAllocCount;
  xPL_ServiceListenerDefPtr serviceListenerList; 
};

-- Création d'un service
serviceList = realloc(serviceList, sizeof(xPL_ServicePtr) * serviceAllocCount);
theService = xPL_AllocService(); -> (malloc(sizeof(xPL_Service)))



-- Création manuelle d'un message
/* Attention a compléter..., deux manières de créer un message, voir fonctions createReceivedMessage() et createSendableMessage() */
/* Allocate the message */
theMessage = xPL_AllocMessage();

xPL_setMessageType(theMessage, xPL_MessageType type); (type=xPL_MESSAGE_COMMAND|xPL_MESSAGE_STATUS|xPL_MESSAGE_TRIGGER)

theMessage->hopCount = hopCount;

/* Install source into message */
xPL_setSource(theMessage, theVendor, theDeviceID, theInstanceID);

xPL_setBroadcastMessage(theMessage, TRUE);
ou
xPL_setTargetGroup(theMessage, groupNameBuffer); (groupNameBuffer = 'GROUP.qqchose')
ou
xPL_setTarget(theMessage, theVendor, theDeviceID, theInstanceID);

xPL_setSchema(xPL_MessagePtr theMessage, String theSchemaClass, String theSchemaType)

/* Crée le messageBody si NULL et y ajoute une seule ligne si elle n'existe pas, sinon la met à jour */
xPL_setMessageNamedValue(xPL_MessagePtr theMessage, String theName, String theValue) 
/* Crée le messageBody si NULL et y ajoute la ligne */
xPL_addMessageNamedValue(xPL_MessagePtr theMessage, String theName, String theValue)
/* Met à jour ou ajoute la ligne si necessaire, le messageBody doit exister */
xPL_setNamedValue(xPL_NameValueListPtr theList, String theName, String theValue)

/* Pour traiter le message */
xPL_dispatchMessageEvent(xPL_MessagePtr theMessage)
---

xPL_Clock.c:
	xPL_parseCommonArgs
	xPL_initialize(xPL_getParsedConnectionType()) /* Create a socket for broadcasting messages (htons(BASE_XPL_PORT))*/
		setupBroadcastAddr
		makeConnection
			attempHubConnection /* Attempt to make a hub based connection (htons(0)) */
	    xPL_addIODevice(xPL_receiveMessage, -1, xPLFD, TRUE, FALSE, FALSE)) /* Install a listener for xPL oriented messages */
		xPL_addMessageListener(xPL_handleServiceMessage, NULL); -> On ajoute un listener dans messageListenerList
	xPL_createService
		newService
			xPL_AllocService
			xPL_getFairlyUniqueIdent
			xPL_setServiceVendor
			xPL_setServiceDeviceID
			xPL_setServiceInstanceID
			xPL_setHeartbeatInterval
	xPL_setServiceVersion
	xPL_addServiceListener
	xPL_setServiceEnabled
		xPL_sendHeartbeat
		xPL_sendGoodbyeHeartbeat
		createSendableMessage
	for (;;)
		xPL_processMessages(100);
			SYSCALL(activeDevices = poll(pollInfo, pollInfoCount, thisTimeout))
			for (deviceIndex = pollInfoCount - 1; deviceIndex >= 0; deviceIndex--)
				pollUserInfo[deviceIndex].ioHandler(pollInfo[deviceIndex].fd, pollInfo[deviceIndex].revents, pollUserInfo[deviceIndex].userValue);
---
	xPL_receiveMessage
		recvfrom(xPLFD, &messageBuff, MSG_BUFF_SIZE - 1, 0, NULL, NULL)
		xPL_dispatchRawEvent
		theMessage = parseMessage(messageBuff)
		isHubEcho
		xPL_dispatchMessageEvent  -> Envoi à tous les messages listeners du tableau messageListenerList
---
	xPL_handleServiceMessage 			/* Run the passed message by each service and see who is interested */
		handleMessage 					/* Process a message and see if it applies to this service */
			xPL_dispatchServiceEvent 	/* Dispatch service messages to appropriate listeners*/
			


xPL_Logger.c
	xPL_parseCommonArgs
	xPL_initialize(xPL_getParsedConnectionType())
	xPL_addMessageListener
	xPL_createConfigurableService
		xPL_createService
		xPL_setServiceConfigFile
		xPL_addServiceListener
		xPL_loadServiceConfig	
	xPL_setServiceVersion
	xPL_addServiceConfigChangedListener
	xPL_setServiceEnabled
	xPL_processMessages(-1)


---
Evénements
	EV_XPLMESSAGE : Arrivée d'un message xPL
		- Recherche de determinators possédant
			- input match="any"
			- une condition "xplCondition"
			- ne possédant pas de condition "globalChanged"
			=> Vérification que la condition est vérifiée avec le message en cours
			=> Execution des actions
		- Recherche de determinators possédant
			- input match="all"
			- une condition "xplCondition"
			- ne possédant pas de condition "globalChanged"
			=> Test de toutes les conditions
			=> Si OK, alors execution des actions
	EV_GLOBALCHANGED : Modification d'une variable globale
		- Recherche de determinators possédant
			- input match="any"
			- une condition "globalChanged" avec attribut @name="le nom de la variable modifiée"
			=> Execution des actions
		- Recherche de determinators possédant
			- input match="all"
			- une condition "globalChanged" avec attribut @name="le nom de la variable modifiée"
			=> Test de toutes les conditions
			=> Si OK, alors execution des actions
	EV_TIME : Tip horaire
		- Recherche de determinators possédant
			- input match="any"
			- une condition "timeCondition" 
			- ne possédant pas de condition "globalChanged"
			=> Vérification que la condition est vérifiée avec la date/heure en cours
			=> Execution des actions
		- Recherche de determinators possédant
			- input match="any"
			- une condition "dayCondition"
			- ne possédant pas de condition "globalChanged"
			=> Vérification que l'attribut @dow possedant le flag du jour en cours à 1
			=> Execution des actions
		- Recherche de determinators possédant
			- input match="all"
			- une condition "timeCondition"
			- ne possédant pas de condition "globalChanged"
			=> Test de toutes les conditions
			=> Si OK, alors execution des actions

	
